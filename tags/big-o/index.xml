<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Big O on Einu sinni á Koala</title>
    <link>https://davityle.github.io/tags/big-o/</link>
    <description>Recent content in Big O on Einu sinni á Koala</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Feb 2016 05:27:09 -0600</lastBuildDate>
    
	<atom:link href="https://davityle.github.io/tags/big-o/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Data Structures and Algorithms</title>
      <link>https://davityle.github.io/post/computer-science-basics/</link>
      <pubDate>Tue, 23 Feb 2016 05:27:09 -0600</pubDate>
      
      <guid>https://davityle.github.io/post/computer-science-basics/</guid>
      <description>&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;

&lt;p&gt;This post contains the implementations, in Java 8, of a few data structures and algorithms commonly discussed within computer science.&lt;/p&gt;

&lt;p&gt;The full source code for this post can be found &lt;a href=&#34;https://github.com/davityle/cs-basics-java&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tests for the data structures and algorithms can be found &lt;a href=&#34;https://github.com/davityle/cs-basics-java/tree/master/test/com/github/davityle/csbasics&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davityle.github.io/post/computer-science-basics/#hash-map&#34;&gt;Hash Map&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davityle.github.io/post/computer-science-basics/#graph&#34;&gt;Graph&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davityle.github.io/post/computer-science-basics/#array-list&#34;&gt;Array List&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davityle.github.io/post/computer-science-basics/#linked-list&#34;&gt;Linked List&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davityle.github.io/post/computer-science-basics/#tree&#34;&gt;Tree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davityle.github.io/post/computer-science-basics/#trie&#34;&gt;Trie&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davityle.github.io/post/computer-science-basics/#quick-sort&#34;&gt;Quick Sort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davityle.github.io/post/computer-science-basics/#merge-sort&#34;&gt;Merge Sort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davityle.github.io/post/computer-science-basics/#a&#34;&gt;A*&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://davityle.github.io/post/computer-science-basics/#convex-hull&#34;&gt;Convex Hull&lt;/a&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploring the Worst Case Complexity of Quicksort</title>
      <link>https://davityle.github.io/post/quicksort-randomize-worst-case/</link>
      <pubDate>Sat, 03 Oct 2015 10:01:16 -0700</pubDate>
      
      <guid>https://davityle.github.io/post/quicksort-randomize-worst-case/</guid>
      <description>&lt;p&gt;The quicksort algorithm has the best case complexity of O(n log n) when each pivot in the sort divides the list into two equal uniform pieces [1]. The worst case occurs when the pivot always divides the list into one list of size 1 and one list of size N - 1. Such as when sorting an already sorted array and the pivot is always chosen as the last element in the list. The complexity of quicksort in this case is an unfortunate O(n&lt;span style=&#34;position: relative; bottom: 1ex; font-size: 80%;&#34;&gt;2&lt;/span&gt;). For this reason, it is recommended to use a random pivot point. This gives an average case of O(n log n) [2]. However, this does not remove the worst case scenario.&lt;/p&gt;

&lt;p&gt;For example, consider this array:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;88&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;999&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1040&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;89&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2009&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;with these given “random” pivots:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You get this result:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>