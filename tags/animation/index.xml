<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Animation on If You Care</title>
    <link>http://tylerdavis.info/tags/animation/</link>
    <description>Recent content in Animation on If You Care</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Feb 2015 11:30:53 -0700</lastBuildDate>
    <atom:link href="http://tylerdavis.info/tags/animation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating a striped view in Android</title>
      <link>http://tylerdavis.info/post/stripes-in-android/</link>
      <pubDate>Sat, 07 Feb 2015 11:30:53 -0700</pubDate>
      
      <guid>http://tylerdavis.info/post/stripes-in-android/</guid>
      <description>&lt;p&gt;Have you ever said to yourself, &amp;lsquo;Wow, this view needs some stripes, but there is no android:stripes=&amp;ldquo;true&amp;rdquo; attribute and I don&amp;rsquo;t know how to draw stripes using the canvas&amp;rsquo;? If so, this is the perfect place for you. Or, if you need to draw stripes and figured you&amp;rsquo;d check the internet for an easy solution before you tried it yourself than you are also in the right place.&lt;/p&gt;

&lt;p&gt;For those of you who just want the code here it is.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class StripedView extends View {

    private static final float STRIPE_WIDTH_PERCT = .05f;
    private static final float STRIPE_OFFSET_PERCT = .2f;
    private Path stripespath = new Path();
    private Paint blackPaint = new Paint();

    public StripedView(Context context) {
        super(context);
    }

    public StripedView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public StripedView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    public StripedView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
        super(context, attrs, defStyleAttr, defStyleRes);
    }
    //init()
    {
        blackPaint.setAntiAlias(true);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        drawStripes(canvas, 0, getHeight(), 0, getWidth(), blackPaint);
    }

    private void drawStripes(Canvas canvas, float topy, float bottomy, float startx, float endx, Paint p){
        if(bottomy - topy &amp;lt; 1){
            return;
        }
        stripespath.reset();
        float width = (bottomy - topy) * STRIPE_WIDTH_PERCT;
        float offset = (bottomy - topy) * STRIPE_OFFSET_PERCT;
        for(float xPos = startx - offset; xPos &amp;lt;= endx; xPos += offset + width){
            stripespath.moveTo(xPos, topy);
            stripespath.lineTo(xPos + width, topy);
            stripespath.lineTo(xPos + offset + width, bottomy);
            stripespath.lineTo(xPos + offset, bottomy);
            stripespath.lineTo(xPos, topy);
        }
        canvas.drawPath(stripespath, p);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will result in something that looks like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tylerdavis.info/images/device-2015-02-07-125851.png&#34; alt=&#34;Screenshot of stripes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Drawing stripes is pretty straight forward. You need a defined width of your stripe and an offset between the top and the bottom of the stripe. If the &lt;a href=&#34;http://developer.android.com/reference/android/graphics/Canvas.html&#34;&gt;Canvas&lt;/a&gt; class in Android had a draw polygon class then we could then just draw a bunch of Polygons. Instead we have to use the &lt;a href=&#34;http://developer.android.com/reference/android/graphics/Path.html&#34;&gt;Path&lt;/a&gt; object. Fortunately, the Path object is fairly simple and intuitive to use.&lt;/p&gt;

&lt;p&gt;Grab your width of your stripe. I&amp;rsquo;m using a percentage of height of the view but any width is fine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;float width = (bottomy - topy) * STRIPE_WIDTH_PERCT;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next grab an offset for each stripe.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;float offset = (bottomy - topy) * STRIPE_OFFSET_PERCT;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you need to loop across the width of your view. For this example I start off of the view by the width of the offset in order to get the end of the first stripe at the bottom left of the view.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;float xPos = startx - offset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll want to increment the x position by the offset plus the width so that you get evenly spaced stripes. This is important if you want to animate it and have it look good.&lt;/p&gt;

&lt;p&gt;When you draw your stripes you can actually use a single path for all of the stripes. You &amp;lsquo;move&amp;rsquo; the path to the top left corner of the stripe which is just (x,y) then you draw a line across to (x + stripeWidth, y), down to (x + stripeWidth + offset, y + height), over to (x + offset, y + height, and then back to (x,y). Then you increment x by the width and the offset and repeat the process until your x position is greater than the width of your view.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re code will look something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(float xPos = startx - offset; xPos &amp;lt;= endx; xPos += offset + width){
    stripespath.moveTo(xPos, topy);
    stripespath.lineTo(xPos + width, topy);
    stripespath.lineTo(xPos + offset + width, bottomy);
    stripespath.lineTo(xPos + offset, bottomy);
    stripespath.lineTo(xPos, topy);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that drawing it is as simple as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;canvas.drawPath(stripespath, p);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets have some fun with it. What would happen if we changed our starting position based off of what time it was.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static final long ANIMATION_SPEED = 30;

float xPos = startx - (System.currentTimeMillis()/ANIMATION_SPEED) % (long)(offset + width)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then redrew the view at a regular interval.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static final long REFRESH_RATE = 33;
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
    drawStripes(canvas, 0, getHeight(), 0, getWidth(), blackPaint);
    postDelayed(invalidateRunnable, REFRESH_RATE);
}

private final Runnable invalidateRunnable = new Runnable() {
    public void run() {
        invalidate();
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You would get this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tylerdavis.info/images/imageedit_3_3395727418.gif&#34; alt=&#34;Animated Stripes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Or what if you only want to draw the stripes in a small area of your view. Then you can clip the canvas to only draw in the section that you have clipped.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;canvas.save();
canvas.clipRect(20, 20, getWidth() - 20, getHeight() - 20);
drawStripes(canvas, 20, getHeight() - 20, 20, getWidth() - 20, redPaint);
canvas.restore();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://tylerdavis.info/images/device-2015-02-07-153205.png&#34; alt=&#34;Clipped Stripes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can flip the direction of the stripes by swapping the y values.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stripespath.moveTo(xPos, bottomy);
stripespath.lineTo(xPos + width, bottomy);
stripespath.lineTo(xPos + offset + width, topy);
stripespath.lineTo(xPos + offset, topy);
stripespath.lineTo(xPos, bottomy);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://tylerdavis.info/images/device-2015-02-07-153631.png&#34; alt=&#34;Swapped Values&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And finally you can draw stripes on any view that you want. Such as a Button.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class StripedButton extends Button {
    private static final float STRIPE_WIDTH_PERCT = .1f;
    private static final float STRIPE_OFFSET_PERCT = .15f;
    private Path stripespath = new Path();
    private Paint redPaint = new Paint();

    public StripedButton(Context context) {
        super(context);
    }

    public StripedButton(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public StripedButton(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    public StripedButton(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
        super(context, attrs, defStyleAttr, defStyleRes);
    }
    //init()
    {
        redPaint.setAntiAlias(true);
        redPaint.setColor(0xFFFF5555);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        drawStripes(canvas, getPaddingLeft(), getHeight() - getPaddingBottom(), getPaddingLeft(), getWidth() - getPaddingRight(), redPaint);
        super.onDraw(canvas);
    }

    private void drawStripes(Canvas canvas, float topy, float bottomy, float startx, float endx, Paint p){
        if(bottomy - topy &amp;lt; 1){
            return;
        }
        stripespath.reset();
        float width = (bottomy - topy) * STRIPE_WIDTH_PERCT;
        float offset = (bottomy - topy) * STRIPE_OFFSET_PERCT;
        for(float xPos = startx - offset; xPos &amp;lt;= endx; xPos += offset + width){
            stripespath.moveTo(xPos, bottomy);
            stripespath.lineTo(xPos + width, bottomy);
            stripespath.lineTo(xPos + offset + width, topy);
            stripespath.lineTo(xPos + offset, topy);
            stripespath.lineTo(xPos, bottomy);
        }
        canvas.drawPath(stripespath, p);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://tylerdavis.info/images/device-2015-02-07-154645.png&#34; alt=&#34;Button With Stripes&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>